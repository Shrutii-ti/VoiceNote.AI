import React from 'react';

interface TranscriptionData {
  transcription: string;
  language: string;
  duration: number;
  originalFilename: string;
  emotion: string;
  tone: string;
  emotionReason: string;
}

interface TranscriptionResultProps {
  data: TranscriptionData;
  onClear: () => void;
}

const TranscriptionResult: React.FC<TranscriptionResultProps> = ({ data, onClear }) => {
  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}m ${secs}s`;
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text).then(() => {
      alert('Copied to clipboard!');
    }).catch(() => {
      alert('Failed to copy to clipboard');
    });
  };

  const downloadAsText = () => {
    const content = `VoiceNote.AI Transcription Report
======================================

File: ${data.originalFilename}
Duration: ${formatDuration(data.duration)}
Language: ${data.language.toUpperCase()}

Transcription:
${data.transcription}

Emotion Analysis:
Emotion: ${data.emotion}
Tone: ${data.tone}
Reason: ${data.emotionReason}

Generated by VoiceNote.AI
Powered by OpenAI Whisper & GPT-4o-mini
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `transcription-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="transcription-results">
      {/* Header */}
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
        <h3 style={{ fontSize: '1.5rem', fontWeight: '700', color: '#667eea', margin: 0 }}>
          📝 Transcription Results
        </h3>
        <button 
          className="secondary-button"
          onClick={onClear}
          style={{ 
            background: '#f8f9fa', 
            color: '#6c757d',
            border: '1px solid #dee2e6',
            padding: '8px 16px',
            fontSize: '0.9rem'
          }}
        >
          ✕ Clear Results
        </button>
      </div>

      {/* File Info */}
      <div className="result-section">
        <div className="result-label">📁 File Information</div>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '15px' }}>
          <div>
            <strong>Filename:</strong> {data.originalFilename}
          </div>
          <div>
            <strong>Duration:</strong> {formatDuration(data.duration)}
          </div>
          <div>
            <strong>Language:</strong> {data.language.toUpperCase()}
          </div>
        </div>
      </div>

      {/* Transcription */}
      <div className="result-section">
        <div className="result-label">🗣️ Transcription</div>
        <div className="result-value" style={{ 
          background: '#f8f9fa', 
          padding: '20px', 
          borderRadius: '10px',
          border: '1px solid #e9ecef',
          position: 'relative'
        }}>
          <p style={{ margin: 0, whiteSpace: 'pre-wrap' }}>{data.transcription}</p>
          <button 
            onClick={() => copyToClipboard(data.transcription)}
            style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: '#667eea',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              padding: '5px 10px',
              fontSize: '0.8rem',
              cursor: 'pointer'
            }}
          >
            📋 Copy
          </button>
        </div>
      </div>

      {/* Emotion Analysis */}
      <div className="result-section">
        <div className="result-label">🧠 Emotion & Tone Analysis</div>
        <div style={{ marginBottom: '15px' }}>
          <span className="emotion-badge">
            😊 {data.emotion.charAt(0).toUpperCase() + data.emotion.slice(1)}
          </span>
          <span className="tone-badge">
            🎭 {data.tone.charAt(0).toUpperCase() + data.tone.slice(1)}
          </span>
        </div>
        <div className="result-value">
          <strong>Analysis:</strong> {data.emotionReason}
        </div>
      </div>

      {/* Action Buttons */}
      <div style={{ 
        display: 'flex', 
        gap: '15px', 
        justifyContent: 'center',
        marginTop: '25px',
        paddingTop: '20px',
        borderTop: '1px solid rgba(0, 0, 0, 0.1)'
      }}>
        <button 
          onClick={() => copyToClipboard(data.transcription)}
          style={{
            background: 'linear-gradient(45deg, #667eea, #764ba2)',
            color: 'white',
            border: 'none',
            borderRadius: '25px',
            padding: '12px 24px',
            fontSize: '1rem',
            fontWeight: '600',
            cursor: 'pointer',
            transition: 'all 0.3s ease'
          }}
        >
          📋 Copy Transcription
        </button>
        
        <button 
          onClick={downloadAsText}
          style={{
            background: 'linear-gradient(45deg, #ff6b6b, #ee5a24)',
            color: 'white',
            border: 'none',
            borderRadius: '25px',
            padding: '12px 24px',
            fontSize: '1rem',
            fontWeight: '600',
            cursor: 'pointer',
            transition: 'all 0.3s ease'
          }}
        >
          💾 Download Report
        </button>
      </div>

      {/* Powered by */}
      <div style={{ 
        textAlign: 'center', 
        marginTop: '20px', 
        fontSize: '0.9rem', 
        color: '#6c757d',
        opacity: 0.8
      }}>
        Powered by OpenAI Whisper & GPT-4o-mini
      </div>
    </div>
  );
};

export default TranscriptionResult;
